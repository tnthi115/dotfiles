{
  "$schema": "https://opencode.ai/config.json",
  "share": "manual",
  "autoupdate": true,
  "theme": "tymon-kanagawa",
  "instructions": [
    "*/AGENTS.md",
    "AGENTS.md",
    "README.md",
    "docs/**/*.md",
    "docs/**/*.puml",
    "pbdoc/docs.md",
  ],
  "provider": {
    "f5": {
      "npm": "@ai-sdk/openai-compatible",
      "name": "f5",
      "options": {
        "baseURL": "https://f5ai.pd.f5net.com/openai/",
        // Set your OPENAI_API_KEY environment variable, or read it from a file
        // "apiKey": "file:~/.openai_api_key",
        "apiKey": "{env:OPENAI_API_KEY}",
      },
      "models": {
        "gpt-5": {
          "name": "gpt-5",
        },
        "gpt-5-mini": {
          "name": "gpt-5-mini",
        },
        "gpt-5-nano": {
          "name": "gpt-5-nano",
        },
        "gpt-4.1": {
          "name": "gpt-4.1",
        },
        "gpt-4.1-mini": {
          "name": "gpt-4.1-mini",
        },
        "gpt-4o": {
          "name": "gpt-4o",
        },
        "gpt-4o-mini": {
          "name": "gpt-4o-mini",
        },
        "o4-mini": {
          "name": "o4-mini",
        },
        "o3": {
          "name": "o3",
        },
        "o3-mini": {
          "name": "o3-mini",
        },
        "o1": {
          "name": "o1",
        },
      },
    },
  },
  "mode": {
    "plan": {
      "model": "github-copilot/claude-sonnet-4",
      "prompt": "You are an interactive CLI tool that helps users with software engineering tasks. Use the instructions below and the tools available to you to assist the user.\n\nIMPORTANT: You must NEVER generate or guess URLs for the user unless you are confident that the URLs are for helping the user with programming. You may use URLs provided by the user in their messages or local files.\n\nIf the user asks for help or wants to give feedback inform them of the following: \n- /help: Get help with using opencode\n- To give feedback, users should report the issue at https://github.com/sst/opencode/issues\n\n# Tone and style\nYou should be concise, direct, and to the point.\nYou MUST answer concisely with fewer than 4 lines (not including tool use or code generation), unless user asks for detail.\nIMPORTANT: You should minimize output tokens as much as possible while maintaining helpfulness, quality, and accuracy. Only address the specific query or task at hand, avoiding tangential information unless absolutely critical for completing the request. If you can answer in 1-3 sentences or a short paragraph, please do.\nIMPORTANT: You should NOT answer with unnecessary preamble or postamble (such as explaining your code or summarizing your action), unless the user asks you to.\nDo not add additional code explanation summary unless requested by the user. After working on a file, just stop, rather than providing an explanation of what you did.\nAnswer the user's question directly, without elaboration, explanation, or details. One word answers are best. Avoid introductions, conclusions, and explanations. You MUST avoid text before/after your response, such as \"The answer is <answer>.\" or \"Based on the information provided, the answer is...\" or \"Here is what I will do next...\"\n\n# Proactiveness\nYou are allowed to be proactive, but only when the user asks you to do something. You should strive to strike a balance between:\n- Doing the right thing when asked, including taking actions and follow-up actions\n- Not surprising the user with actions you take without asking\nFor example, if the user asks you how to approach something, you should do your best to answer their question first, and not immediately jump into taking actions.\n\n# Following conventions\nWhen making changes to files, first understand the file's code conventions. Mimic code style, use existing libraries and utilities, and follow existing patterns.\n- NEVER assume that a given library is available, even if it is well known. Whenever you write code that uses a library or framework, first check that this codebase already uses the given library.\n- When you create a new component, first look at existing components to see how they're written; then consider framework choice, naming conventions, typing, and other conventions.\n- When you edit a piece of code, first look at the code's surrounding context (especially its imports) to understand the code's choice of frameworks and libraries. Then consider how to make the given change in a way that is most idiomatic.\n- Always follow security best practices. Never introduce code that exposes or logs secrets and keys. Never commit secrets or keys to the repository.\n\n# Code style\n- IMPORTANT: DO NOT ADD ***ANY*** COMMENTS unless asked\n\n# Task Management\nYou have access to the TodoWrite tools to help you manage and plan tasks. Use these tools VERY frequently to ensure that you are tracking your tasks and giving the user visibility into your progress.\nThese tools are also EXTREMELY helpful for planning tasks, and for breaking down larger complex tasks into smaller steps. If you do not use this tool when planning, you may forget to do important tasks - and that is unacceptable.\n\nIt is critical that you mark todos as completed as soon as you are done with a task. Do not batch up multiple tasks before marking them as completed.\n\n# Tool usage policy\n- When doing file search, prefer to use the Task tool in order to reduce context usage.\n- You should proactively use the Task tool with specialized agents when the task at hand matches the agent's description.\n- You have the capability to call multiple tools in a single response. When multiple independent pieces of information are requested, batch your tool calls together for optimal performance.\n\nIMPORTANT: Always use the TodoWrite tool to plan and track tasks throughout the conversation.\n\n# Code References\nWhen referencing specific functions or pieces of code include the pattern `file_path:line_number` to allow the user to easily navigate to the source code location.\n\n## PLANNING AGENT SPECIFIC RESTRICTIONS\n\nAs a specialized planning agent, you have additional restrictions:\n\n**FILE EDITING RESTRICTIONS:**\n- You can ONLY edit markdown files (.md, .markdown) when creating plan documents\n- Never modify source code, configuration files, or any non-markdown files\n- Use read-only shell commands to gather information\n- Focus on analysis and planning rather than implementation\n\n**PLANNING REQUIREMENTS:**\nWhen creating plans, always include:\n- Clear objectives and scope\n- Step-by-step implementation breakdown\n- Dependencies and prerequisites\n- Success criteria and validation steps\n- Risk assessment and mitigation strategies\n\nAlways save your plans as markdown documents with descriptive filenames like 'plan.md' or '[feature-name]-plan.md'.",
      "tools": {
        "bash": true,
        "edit": true,
        "write": false
      },
      "permission": {
        "bash": {
          "git status": "allow",
          "git diff": "allow",
          "git log": "allow",
          "ls": "allow",
          "pwd": "allow",
          "find": "allow",
          "grep": "allow",
          "cat": "allow",
          "head": "allow",
          "tail": "allow",
          "wc": "allow",
          "tree": "allow",
          "*": "deny"
        },
        "edit": "allow"
      }
    },
    "build": {
      "model": "github-copilot/claude-sonnet-4",
    },
  },
  "mcp": {
    "git": {
      "type": "local",
      "command": ["uvx", "mcp-server-git", "--repository", "${PWD}"],
    },
    "gitlab": {
      "type": "local",
      "command": ["npx", "-y", "@zereight/mcp-gitlab"],
      "environment": {
        "GITLAB_PERSONAL_ACCESS_TOKEN": "${GITLAB_TOKEN}",
        "GITLAB_API_URL": "https://gitlab.com/api/v4/",
        "GITLAB_READ_ONLY_MODE": "false",
        "USE_GITLAB_WIKI": "false",
        "USE_MILESTONE": "false",
        "USE_PIPELINE": "false",
      },
    },
    "context7": {
      "type": "local",
      "command": ["npx", "-y", "@upstash/context7-mcp"],
      "environment": {
        "DEFAULT_MINIMUM_TOKENS": "5000",
      },
    },
  },
  "agent": {
    "code-reviewer": {
      "description": "Reviews code for best practices and potential issues",
      "mode": "subagent",
      "model": "github-copilot/claude-sonnet-4",
      "prompt": "You are a code reviewer. Focus on security, performance, and maintainability.",
      "tools": {
        "write": false,
        "edit": false,
      },
    },
  },
  "command": {
    "plan": {
      "template": "Create a comprehensive implementation plan for: $ARGUMENTS\n\nAnalyze the current project structure and requirements:\n!`find . -type f -name \"*.md\" -o -name \"*.json\" -o -name \"*.js\" -o -name \"*.ts\" -o -name \"*.py\" -o -name \"*.go\" | head -20`\n\nCurrent git status:\n!`git status --porcelain`\n\nRecent commits for context:\n!`git log --oneline -5`\n\nBased on this analysis, create a detailed plan that includes:\n\n1. **Objective & Scope**\n   - Clear problem statement\n   - Success criteria\n   - Scope boundaries\n\n2. **Technical Analysis**\n   - Current state assessment\n   - Dependencies and constraints\n   - Technology stack considerations\n\n3. **Implementation Strategy**\n   - Step-by-step breakdown\n   - Timeline estimates\n   - Risk assessment\n\n4. **Validation Plan**\n   - Testing approach\n   - Quality gates\n   - Rollback strategy\n\nSave the plan as a markdown document with a descriptive filename based on the requested feature or task.",
      "description": "Create a detailed implementation plan",
      "agent": "plan",
      "model": "github-copilot/claude-sonnet-4"
    },
    "analyze-codebase": {
      "template": "Perform comprehensive codebase analysis and generate an optimized AGENTS.md file for the current project.\n\n## Project Context Analysis\n\nCurrent directory structure overview:\n!`find . -maxdepth 3 -type f -name \"*.json\" -o -name \"*.toml\" -o -name \"*.yml\" -o -name \"*.yaml\" -o -name \"Makefile\" -o -name \"Dockerfile\" | head -20`\n\nProject type detection:\n!`ls -la | grep -E \"(package\\.json|go\\.mod|pyproject\\.toml|requirements\\.txt|Cargo\\.toml)\"`\n\nRepository status:\n!`git status --porcelain | head -10`\n\nFile count analysis:\n!`find . -type f -not -path \"./.git/*\" -not -path \"./node_modules/*\" -not -path \"./dist/*\" -not -path \"./build/*\" | wc -l`\n\n## Analysis Objectives\n\nPerform comprehensive analysis to generate an accurate AGENTS.md file that includes:\n\n1. **Repository Purpose & Architecture**\n   - Identify project type and core purpose from actual files and structure\n   - Analyze complete technology stack and dependencies with exact versions\n   - Extract real commands from configuration files (package.json, Makefile, scripts)\n\n2. **Development Environment Setup**\n   - Detect prerequisites and installation requirements from project files\n   - Extract actual build, test, and development commands that exist in the project\n   - Validate all commands work in the current environment\n\n3. **Code Style & Architecture Guidelines**\n   - Analyze actual code patterns and conventions from source files\n   - Identify architecture patterns (Clean Architecture, MVC, microservices) used in the project\n   - Extract naming conventions from real code samples and directory structure\n\n4. **Agent Optimization Guidelines**\n   - Create project-specific guidance for AI agents based on actual project patterns\n   - Define quality gates and automated checks from existing configurations\n   - Identify common patterns and troubleshooting approaches from the codebase\n\n## Analysis Requirements\n\n- **Template-Driven Analysis**: Use appropriate specialized template based on detected project type\n- **Real Commands Only**: Extract actual commands from package.json, Makefile, scripts - never generate hypothetical commands\n- **Verified Paths**: Reference only existing files and directories found in the project\n- **Project-Specific Content**: Base all analysis on actual code patterns, not generic templates or assumptions\n- **Quality Validation**: Test all commands and references before inclusion in AGENTS.md\n\n## Output Requirements\n\nGenerate a complete, accurate AGENTS.md file that:\n- Enables any AI agent to work effectively in this codebase immediately\n- Contains only verified, working commands extracted from the project\n- Provides specific, actionable guidance based on actual project structure and patterns\n- Follows the comprehensive structure defined in the codebase-analyzer template\n- Uses the detected project template (React SPA, Node.js API, Go microservice, Python ML, Static site) for targeted analysis\n\nFocus on accuracy over comprehensiveness. Better to have fewer correct commands than many incorrect ones.\n\nAnalyze the current working directory as the target project and generate the AGENTS.md file in the project root.",
      "description": "Analyze codebase and generate comprehensive AGENTS.md file",
      "agent": "codebase-analyzer",
      "model": "github-copilot/claude-sonnet-4",
      "subtask": true
    }
  },
  "formatter": {
    "prettier": {
      "command": ["~/.local/share/nvim/mason/bin/prettier", "--write", "$FILE"],
      "extensions": [".js", ".jsx", ".ts", ".tsx", ".json", ".html", ".css", ".scss", ".less", ".md", ".yaml", ".yml"],
    },
    "black": {
      "command": ["~/.local/share/nvim/mason/bin/black", "$FILE"],
      "extensions": [".py", ".pyi"],
    },
    "ruff": {
      "command": ["~/.local/share/nvim/mason/bin/ruff", "format", "$FILE"],
      "extensions": [".py", ".pyi"],
    },
    "stylua": {
      "command": ["~/.local/share/nvim/mason/bin/stylua", "$FILE"],
      "extensions": [".lua"],
    },
    "shfmt": {
      "command": ["~/.local/share/nvim/mason/bin/shfmt", "-i", "2", "-ci", "$FILE"],
      "extensions": [".sh", ".bash", ".zsh"],
    },
    "gofumpt": {
      "command": ["~/.local/share/nvim/mason/bin/gofumpt", "-w", "$FILE"],
      "extensions": [".go"],
    },
    "taplo": {
      "command": ["~/.local/share/nvim/mason/bin/taplo", "format", "$FILE"],
      "extensions": [".toml"],
    },
    "yamlfix": {
      "command": ["~/.local/share/nvim/mason/bin/yamlfix", "$FILE"],
      "extensions": [".yaml", ".yml"],
    },
    "usort": {
      "command": ["~/.local/share/nvim/mason/bin/usort", "format", "$FILE"],
      "extensions": [".py", ".pyi"],
    },
  },
  "lsp": {
    "bash-language-server": {
      "command": ["~/.local/share/nvim/mason/bin/bash-language-server", "start"],
      "extensions": [".sh", ".bash", ".zsh"],
    },
    "lua-language-server": {
      "command": ["~/.local/share/nvim/mason/bin/lua-language-server"],
      "extensions": [".lua"],
    },
    "gopls": {
      "command": ["~/.local/share/nvim/mason/bin/gopls"],
      "extensions": [".go", ".mod", ".sum"],
    },
    "rust-analyzer": {
      "command": ["~/.local/share/nvim/mason/bin/rust-analyzer"],
      "extensions": [".rs"],
    },
    "basedpyright": {
      "command": ["~/.local/share/nvim/mason/bin/basedpyright-langserver", "--stdio"],
      "extensions": [".py", ".pyi"],
    },
    "vtsls": {
      "command": ["~/.local/share/nvim/mason/bin/vtsls", "--stdio"],
      "extensions": [".js", ".jsx", ".ts", ".tsx", ".mjs", ".cjs", ".mts", ".cts"],
    },
    "yaml-language-server": {
      "command": ["~/.local/share/nvim/mason/bin/yaml-language-server", "--stdio"],
      "extensions": [".yaml", ".yml"],
    },
    "vscode-json-language-server": {
      "command": ["~/.local/share/nvim/mason/bin/vscode-json-language-server", "--stdio"],
      "extensions": [".json", ".jsonc"],
    },
    "marksman": {
      "command": ["~/.local/share/nvim/mason/bin/marksman", "server"],
      "extensions": [".md", ".markdown"],
    },
    "docker-langserver": {
      "command": ["~/.local/share/nvim/mason/bin/docker-langserver", "--stdio"],
      "extensions": [".dockerfile", "Dockerfile*"],
    },
    "docker-compose-langserver": {
      "command": ["~/.local/share/nvim/mason/bin/docker-compose-langserver", "--stdio"],
      "extensions": ["docker-compose.yml", "docker-compose.yaml", "compose.yml", "compose.yaml"],
    },
    "jsonnet-language-server": {
      "command": ["~/.local/share/nvim/mason/bin/jsonnet-language-server"],
      "extensions": [".jsonnet", ".libsonnet"],
    },
    "gitlab-ci-ls": {
      "command": ["~/.local/share/nvim/mason/bin/gitlab-ci-ls"],
      "extensions": [".gitlab-ci.yml", ".gitlab-ci.yaml"],
    },
    "fish-lsp": {
      "command": ["~/.local/share/nvim/mason/bin/fish-lsp", "start"],
      "extensions": [".fish"],
    },
    "golangci-lint-langserver": {
      "command": ["~/.local/share/nvim/mason/bin/golangci-lint-langserver"],
      "extensions": [".go"],
    },
    "taplo": {
      "command": ["~/.local/share/nvim/mason/bin/taplo", "lsp", "stdio"],
      "extensions": [".toml"],
    },
  },
}
