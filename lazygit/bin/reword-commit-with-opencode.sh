#!/bin/bash
set -euo pipefail

SHA="$1"
USER_INSTRUCTIONS="${2-}"

REPO_ROOT="$(git rev-parse --show-toplevel)"
CURRENT_HEAD="$(git rev-parse HEAD)"

# Get commit message and diff
COMMIT_INFO="$(git show --stat --patch --no-color "$SHA")"

# Always prepend a default rewording instruction to the prompt
DEFAULT_PROMPT="Rewrite the following git commit message and diff. Output only the new commit message. When rewording, preserve all existing commit footers and trailers (such as Co-Authored-By, Signed-off-by, or opencode footers) exactly as they appear. If you see lines like 'test change', ignore them unless they are important. If the user provides extra instructions, follow them as well."

if [ -n "$USER_INSTRUCTIONS" ]; then
  PROMPT="$DEFAULT_PROMPT $USER_INSTRUCTIONS\n\n$COMMIT_INFO\n"
else
  PROMPT="$DEFAULT_PROMPT\n\n$COMMIT_INFO\n"
fi

# Debug output
>&2 echo "[DEBUG] SHA: $SHA"
>&2 echo "[DEBUG] USER_INSTRUCTIONS: $USER_INSTRUCTIONS"
>&2 echo "[DEBUG] PROMPT:"
>&2 echo "$PROMPT"

# Check for unstaged or uncommitted changes and auto-stash if needed
STASHED=0
STASH_MSG="lazygit auto-stash"
if ! git diff --quiet || ! git diff --cached --quiet; then
  echo "[INFO] Unstaged or uncommitted changes detected. Stashing before reword operation..."
  git stash push -k -u -m "$STASH_MSG"
  STASHED=1
fi

NEW_MSG="$(opencode run --mode build --model github-copilot/gpt-4.1 "$PROMPT" 2>/tmp/opencode.err)"
OPENCODE_EXIT=$?
if [ $OPENCODE_EXIT -ne 0 ] || [ -z "$NEW_MSG" ] || grep -q "Usage:" /tmp/opencode.err; then
  echo "Error: opencode failed. See error below:"
  cat /tmp/opencode.err
  # If we stashed, try to pop the stash before exiting
  if [ "$STASHED" -eq 1 ]; then
    git stash pop || echo "[WARN] Failed to pop stash. Please resolve manually."
  fi
  exit 1
fi

printf "\n---\nNew commit message generated by opencode:\n%s\n---\n\n" "$NEW_MSG"

if [ "$SHA" = "$CURRENT_HEAD" ]; then
  git commit --amend -m "$NEW_MSG"
else
  PARENT_SHA="$(git rev-parse "$SHA"^ )"
  GIT_SEQUENCE_EDITOR="sed -i '' '0,/pick $SHA/s//reword $SHA/'" \
  GIT_EDITOR="bash -c 'echo \"$NEW_MSG\" > \"$1\"'" \
  git rebase -i "$PARENT_SHA"
fi

# Pop the stash if we stashed
if [ "$STASHED" -eq 1 ]; then
  echo "[INFO] Popping previously stashed changes..."
  if ! git stash pop; then
    echo "[ERROR] Failed to pop stash. You may have merge conflicts. Please resolve them manually."
    exit 1
  fi
fi

# Pop the stash if we stashed
if [ "$STASHED" -eq 1 ]; then
  echo "[INFO] Popping previously stashed changes..."
  if ! git stash pop; then
    echo "[ERROR] Failed to pop stash. You may have merge conflicts. Please resolve them manually."
    exit 1
  fi
fi


printf "\n---\nNew commit message generated by opencode:\n%s\n---\n\n" "$NEW_MSG"

if [ "$SHA" = "$CURRENT_HEAD" ]; then
  git commit --amend -m "$NEW_MSG"
else
  PARENT_SHA="$(git rev-parse "$SHA"^ )"
  GIT_SEQUENCE_EDITOR="sed -i '' '0,/pick $SHA/s//reword $SHA/'" \
  GIT_EDITOR="bash -c 'echo \"$NEW_MSG\" > \"$1\"'" \
  git rebase -i "$PARENT_SHA"
fi


PROMPT="$GUIDELINES_PROMPT

$COMMIT_INFO
"

NEW_MSG="$(opencode run --mode build --model github-copilot/gpt-4.1 "$PROMPT" 2>/tmp/opencode.err)"
OPENCODE_EXIT=$?
if [ $OPENCODE_EXIT -ne 0 ] || [ -z "$NEW_MSG" ] || grep -q "Usage:" /tmp/opencode.err; then
  echo "Error: opencode failed. See error below:"
  cat /tmp/opencode.err
  exit 1
fi

printf "\n---\nNew commit message generated by opencode:\n%s\n---\n\n" "$NEW_MSG"

if [ "$SHA" = "$CURRENT_HEAD" ]; then
  git commit --amend -m "$NEW_MSG"
else
  # Check if this is the root commit (no parent)
  if ! git rev-parse "$SHA"^ >/dev/null 2>&1; then
    echo "[ERROR] Cannot reword the root commit (no parent)."
# Pop the stash if we stashed (and only pop the one we created)
if [ "$STASHED" -eq 1 ]; then
  echo "[INFO] Popping previously stashed changes..."
  # Only pop if the top stash is ours
  TOP_STASH_MSG=$(git stash list -1 | grep "$STASH_MSG" || true)
  if [ -n "$TOP_STASH_MSG" ]; then
    if ! git stash pop; then
      echo "[ERROR] Failed to pop stash. You may have merge conflicts. Please resolve them manually."
      exit 1
    fi
  else
    echo "[WARN] No matching auto-stash found to pop."
  fi
fi
    exit 1
  fi
  PARENT_SHA="$(git rev-parse "$SHA"^ )"
  GIT_SEQUENCE_EDITOR="sed -i '' '0,/pick $SHA/s//reword $SHA/'" \
  GIT_EDITOR="bash -c 'echo \"$NEW_MSG\" > \"$1\"'" \
  git rebase -i "$PARENT_SHA"
fi

